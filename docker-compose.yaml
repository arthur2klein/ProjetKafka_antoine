# Use postgres
version: '3.1'

services:

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: kafkacestcool
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    expose:
      - '9093'
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1 
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
    volumes:
      - ./server.properties:/etc/kafka/server.properties

  producer1:
    build:
      context: .
      dockerfile: ./Dockerfile/producer.Dockerfile
    depends_on:
      - kafka
    networks:
      - backend
    environment:
      - ip=IP1

  producer2:
    build:
      context: .
      dockerfile: ./Dockerfile/producer.Dockerfile
    depends_on:
      - kafka
    networks:
      - backend
    environment:
      - ip=IP2

  consumer:
    build:
      context: .
      dockerfile: ./Dockerfile/consumer.Dockerfile
    depends_on:
      - kafka
      - db
    networks:
      - backend  
  
  api:
    build:
      context: .
      dockerfile: ./Dockerfile/api.Dockerfile
    ports:
      - 8000:8080
    depends_on:
      - db
    networks:
      - backend
      - frontend
  
  front:
    image: nginx
    ports:
      - 8080:80
    depends_on:
      - api
    volumes:
      - ./front.html:/usr/share/nginx/html/index.html  
    networks:
      - frontend
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    
